var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImpactChron","category":"page"},{"location":"#ImpactChron","page":"Home","title":"ImpactChron","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ImpactChron.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ImpactChron]","category":"page"},{"location":"#ImpactChron.AsteroidHistory","page":"Home","title":"ImpactChron.AsteroidHistory","text":"AsteroidHistory(typeseed<:Number; nnodes, Δt, tmax, downscale_factor)\n\nstruct containing Arrays that record the evolution of a (bombarded) asteroid.\n\nConstructor function takes a parameter from the proposals to seed type and requires the number of radial nodes nnodes (::Int), the timestep used Δt, the full time duration tmax, and the downscale_factor (::Int).\n\nFields in AsteroidHistory:\n\nField Description\nVfrxn volume fractions of each radial shell\npeakT peak temperature of each radial shell\ncooltime indices in t of the primary cooling date\nimpacts number of impacts at each timestep\ntxr time x radius array of proportional cooling ages\nagedist distribution of ages corresponding to t\nagedist_downscaled distribution of ages corresponding to t_downscaled\nt timesteps of full-scale model\nt_downscaled timesteps of downscaled model output\n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.ImpactSite-Union{Tuple{T}, Tuple{Type{T}, Number}} where T<:ImpactSiteShape","page":"Home","title":"ImpactChron.ImpactSite","text":"ImpactSite(heat<:ImpactSiteShape, C<:Number)\n\nstruct describing the scale and shape of the simulated volume of impact heating.\n\n\n\nCONSTRUCTOR FUNCTION\n\nImpactSite(shape, impactor_diameter)\n\nProviding an impactor_diameter (<:Number) calculates impact parameters based on approximate heat distribution modeled in Davison+ 2012 (GCA, http://doi.org/10.1016/j.gca.2012.08.001).\n\nImpactSite(shape; r, C)\n\nIf values of r and C are provided,  prepares an ImpactSite that extends to the center of an asteroid with radius r (km) and has a surface diameter C times the asteroid circumference (C ∈ [0,1], C = 0.01 by default). If no r is provided this seeds an ImpactSite with zeroed ImpactSiteShape and a C value. \n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.ImpactSiteShape","page":"Home","title":"ImpactChron.ImpactSiteShape","text":"ImpactSiteShape\n\nSupertype of Cone, Parabola, and Hemisphere. Each contains a field z (depth) and r (radius), both in meters.\n\nsee also: ImpactSite\n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.Nrm","page":"Home","title":"ImpactChron.Nrm","text":"Nrm(μ::Float64,σ::Float64)\n\nImmutable struct to describe normally distributed data, reported as mean (μ) and 1σ (σ)\n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.PetroTypes","page":"Home","title":"ImpactChron.PetroTypes","text":"PetroTypes(temps, samples)\n\nstruct containing fields of type3–type6, reflecting petrologic types. Each field contains a ImpactChron.TempProp with subfields T (maximum temperature in K) and p (proportion among the chondrite record). Note that ps sum to unity.\n\nOnly build PetroTypes with its constructor function\n\nConstructor takes a NamedTuple containing maximum temperatures as fields T3-T6 and a Vector{String} containing the petrologic types corresponding to chondrites used as a prior.\n\ne.g. PetroTypes( (T3 = 873, T4 = 973, T5 = 1073, T6 = 1223), [\"4\", \"6\", \"3\", \"5,6\", \"im\"])\n\nIf no argument given –  PetroTypes() – returns zeroed type_ fields and weight=false, which short-circuits weighting by petrologic type. \n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.PriorDistribution","page":"Home","title":"ImpactChron.PriorDistribution","text":"PriorDistribution\n\nSupertype of Nrm, lNrm, Unf\n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.Unf","page":"Home","title":"ImpactChron.Unf","text":"Unf(a::Float64,b::Float64)\n\nImmutable struct to describe uniformly distributed data, reported as minimum (a) and maximum (b).\n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.lNrm","page":"Home","title":"ImpactChron.lNrm","text":"lNrm(μ::Float64,σ::Float64)\n\nImmutable struct to describe lognormally distributed data, reported as natural-log-space mean (μ) and 1σ (σ)\n\n\n\n\n\n","category":"type"},{"location":"#ImpactChron.agerecal-Tuple{Number, Number}","page":"Home","title":"ImpactChron.agerecal","text":"ImpactChron.agerecal(x,sig;monitor_age,n, KAr=false)\n\nRecalculate the age and uncertainty of an Ar-Ar age x±sig (1σ) Ma with the decay constants of Steiger & Jäger 1977 (EPSL, http://doi.org/10.1016/0012-821X(77)90060-7).  Quantifies uncertainty by resampling n times (default: 10⁶).  Optionally accepts a monitor_age. If not given, resamples from a range of absolute monitor ages ∈ [0,3] Ga.\n\nIf KAr=true, this recalculates the sample's K-Ar age with the new decay constants (no monitor correction necessary).\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.asteroid_agedist!-Union{Tuple{N}, Tuple{T}, Tuple{AsteroidHistory, NamedTuple, PetroTypes, ImpactSite{T, N}}} where {T, N}","page":"Home","title":"ImpactChron.asteroid_agedist!","text":"asteroid_agedist!(a::AsteroidHistory, p::NamedTuple, petrotypes::PetroTypes, impactsite::ImpactSite; \n    nᵣ,Tmax,Tmin, melt_reject)\n\nCalculates and updates an asteroid thermochronologic history, contained in a, from parameters defined in p for an impact-heating morphology of impactsite.  Weights the abundance of ages in each radial shell by petrotypes.\n\nIf any petrologic types are missing (see ImpactChron.weight_petro_types!) or the radial fraction of the body exceeding Tmax ≥ melt_reject (0.1 by default), the age distribution is zeroed, which ll_dist_params rejects.\n\nIn short, this is a convenient wrapper for a series of functions used in the weighted thermochronologic model.\n\nsee also: planetesimal_cooling_timestep!, planetesimal_cooling_dates,ImpactChron.weight_petro_types!,impact_reset_array!, ImpactChron.downscale! \n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.csv2dict-Tuple{String}","page":"Home","title":"ImpactChron.csv2dict","text":"csv2dict(filename::String;symbol::Bool=true)\n\nRead a .csv file into a Dict. Assumes columns reflect discrete entries, with the first row specifying that entry's key. For NaN-buffered columns, the NaNs are removed, returning a single-element entry.\n\nA true value for symbol will convert data saved as arrays of Strings into arrays of Symbols.\n\nsee also: nt2csv, csv2nt\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.csv2nt-Tuple{String}","page":"Home","title":"ImpactChron.csv2nt","text":"csv2nt(filename::String;symbol=true)\n\nRead a .csv file into a NamedTuple. Assumes columns reflect discrete entries, with the first row specifying that element's key. For NaN-buffered columns, the NaNs are removed, returning a single-element entry.\n\nA true value for symbol will convert data saved as arrays of Strings into arrays of Symbols.\n\nsee also: nt2csv, csv2dict\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.data2csv-Tuple{String, Any}","page":"Home","title":"ImpactChron.data2csv","text":"data2csv(filename::String,data)\n\nSave data to a .csv file. data may be one of the following: Dict, NamedTuple, or an Array, Accepts single-element or Vector fields. For single-element entries, the rest of the array/table is filled with NaNs.\n\nsee also: nt2csv, dict2csv\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.dict2csv-Tuple{String, Dict}","page":"Home","title":"ImpactChron.dict2csv","text":"dict2csv(filename::String,D::Dict)\n\nSave a Dict to a .csv. Accounts for fields of any type, keys must be Symbols.\n\nFor single-element entries, the rest of the array/table is filled with NaNs.\n\nsee also: nt2csv, data2csv\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.downscale!-Union{Tuple{T}, Tuple{AbstractArray{T}, Any}} where T","page":"Home","title":"ImpactChron.downscale!","text":"ImpactChron.downscale!(B, A)\n\nDownscales elements of Array A into smaller Array B by summing. Scales the downscaled values in B by the ratio of length(A)÷length(B) to preserve any normalizations.\n\nRequires that length(A) % length(B) = 0.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.draw-Tuple{Nrm}","page":"Home","title":"ImpactChron.draw","text":"ImpactChron.draw(x)\n\nMake a pseudorandom draw from  x, which may be a Tuple or any subtype of PriorDistribution. If x is a Number, it simply returns x. \n\nUsed in support of lognormMC.\n\nSee also: Nrm, lNrm, Unf, lognormMC\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.histogramify!-Tuple{AbstractVector, AbstractRange, AbstractVector, AbstractVector}","page":"Home","title":"ImpactChron.histogramify!","text":"ImpactChron.histogramify!(dist::AbstractVector, domain::AbstractRange, x::AbstractVector, y::AbstractVector)\n\nIn-place histogramify that overwites a pre-allocated vector dist. See  histogramify for details.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.histogramify-Tuple{AbstractRange, AbstractVector, AbstractVector}","page":"Home","title":"ImpactChron.histogramify","text":"ImpactChron.histogramify(domain::AbstractRange,x::AbstractVector,y::AbstractVector)\n\nConstructs histogram over bins defined by domain from model outputs in x with corresponding abundances in y.  Does not require a constant step in x, so this calculates histograms of outputs from planetesimal_cooling_dates.\n\nhistogramify normalizes its output, such that for output dist ∑ dist * Δd = 1, so long as all x ∈ domain. If any x ∉ domain, ∑ dist * Δd = 1- (∑yₒᵤₜ / ∑yₐₗₗ ) where the xₒᵤₜ corresponding to yₒᵤₜ are ∉ domain.\n\n\n\nReturns only the histogram masses, centers of bins must be calculated separately with rangemidpoints(domain)\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.impact_reset_array!-Tuple{AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, NamedTuple, ImpactSite}","page":"Home","title":"ImpactChron.impact_reset_array!","text":"impact_reset_array!(\n    tₓr::AbstractArray, solartime::AbstractArray, \n    tcoolₒ::AbstractArray, Vfrxn::AbstractArray,                             \n    impacts::AbstractArray, p::NamedTuple, c::NamedTuple;\n    nᵣ::Integer, Δt::Number )\n\nSimulates an impact history from -χ parameters in p (see below), and resets primary cooling dates (indices of dates in solartime in tcoolₒ) and fractional volumes (Vfraxn) based on impact/crater properties described in c.\n\nRelative abundances of depth-age pairs are tracked in array tₓr (time x radial depth), with dimensions (length(solartime),nᵣ), where nᵣ describes the number of radial nodes, as in planetesimal_cooling_dates.\n\nimpacts and tcoolₒ are pre-allocated vectors that respectively record the number of impacts at each time step and the index of the primary cooling date in solartime.\n\nImpact flux follows an exponential decay described by parameters in p:\n\np. Description\ntχ_ instability start time\nτχ_ e-folding timescale of impact flux\nFχ_ initial impact flux\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.ll_dist-Tuple{AbstractRange, AbstractVector, AbstractVector, AbstractVector}","page":"Home","title":"ImpactChron.ll_dist","text":"ll_dist(x, dist, mu, sigma)\n\nCalculate loglikelihood that observations in Vectors mu and sigma are drawn from modeled distribution described by Vectors x and dist, where x contains the bincenters of a normalized histogram dist and mu and sigma respectively contain the mean and 1σ of the observations.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.ll_dist_params-Tuple{AsteroidHistory, NamedTuple, NamedTuple, AbstractArray, AbstractArray}","page":"Home","title":"ImpactChron.ll_dist_params","text":"ll_dist_params(a, p, plims, mu,sig)\n\nCalculate the combined log-likelihood that \n\nObservations with mean mu and corresponding 1σ uncertainties sig (both ::Array) are drawn from the downscaled age distribution and timesteps contained in a (::AsteroidHistory)\nThe proposal parameters p used to calculate this history are drawn from the prior distributions plims (both ::NamedTuple)\n\nIf the age distribution is zero, quickly returns a log-liklihood of -Inf.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.ll_param-Tuple{Number, Nrm}","page":"Home","title":"ImpactChron.ll_param","text":"ll_param(x::Number,D<:PriorDistribution)\n\nCalculate the log-likelihood that x is drawn from a distribution D, which may be a Normal (Nrm), Lognormal (lNrm), or Uniform (Unf) distribution. For D::Unf, ll_param returns 0 and bounds checks are performed by ImpactChron.prior_bounds within ImpactChron.strict_priors.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.ll_params-Tuple{NamedTuple, NamedTuple}","page":"Home","title":"ImpactChron.ll_params","text":"ll_params(p::NamedTuple,d::NamedTuple)\n\nCalculate log-likelihoods for the proposals in p with corresponding distributions in d\n\nDoes not evaluate impact (χ) parameters, since these were only modeled on Unf distributions.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.lognorm-Tuple{Any}","page":"Home","title":"ImpactChron.lognorm","text":"ImpactChron.lognorm(x)\n\nCalculate the lognormal distribution of x from a collection of Numbers (accepts NamedTuples).  Returns a lNrm type.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.lognormMC-Tuple{Any}","page":"Home","title":"ImpactChron.lognormMC","text":"ImpactChron.lognormMC(x ; n)\n\nCalculate the lognormal distribution of a collection x by resampling the entire collection n times (default=10⁶).\n\nx may contain data in the form of Tuples, PriorDistribution subtypes, or Numbers.\n\nReturns a lNrm type.\n\nSee also: ImpactChron.lognorm, ImpactChron.draw\n\n\n\nJust in case, the function has a (slow) safety net to prevent it from trying to calculate the log of any negative resamples. (This has never happened for the data I used)\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.mcmean-Tuple{AbstractArray, AbstractArray}","page":"Home","title":"ImpactChron.mcmean","text":"ImpactChron.mcmean(x, xsig, n=10_000_000, fullpost=false)\n\nCalculate mean of age(s) x with 1σ uncertainties xsig by Monte Carlo method.  A 10⁷ (default) resample routine returns consistent results at the 10⁻⁴ level.\n\nReturns a tuple of (mean,1σ) by default. If fullpost=true, returns posterior samples rather than summary statistics.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.perturb-Tuple{NamedTuple, Symbol, Number}","page":"Home","title":"ImpactChron.perturb","text":"perturb(p::NamedTuple,k::Symbol,n::Number)\n\nReturn a NamedTuple identical to p, with one field (key k) changed to the value of n. Note that == identity is preserved only if the order of fields in p is: tss,rAlo,R,ta,cAl,Tm,Tc,ρ,Cp,k,tχα,τχα,Fχα,tχβ,τχβ,Fχβ,tχγ,τχγ,Fχγ\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.planetesimal_cooling_dates!-Tuple{AbstractArray, AbstractArray, AbstractArray, NamedTuple}","page":"Home","title":"ImpactChron.planetesimal_cooling_dates!","text":"planetesimal_cooling_dates!(ages, Vfrxn, peakT, p::NamedTuple; nᵣ, Δt, tmax, Tmax, Tmin)\n\nIn-place planetesimal_cooling_dates that updates Arrays ages, Vfrxn, and peakT.\n\nsee also: planetesimal_cooling_dates\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.planetesimal_cooling_dates-Tuple{}","page":"Home","title":"ImpactChron.planetesimal_cooling_dates","text":"planetesimal_cooling_dates(p::NamedTuple; nᵣ, Δt, tmax, Tmax, Tmin)\n\nReturns an NTuple containing (in this order) thermochronologic cooling dates (My after CAIs) and corresponding volume fractions, radial depths (km from center), and peak temperatures (K) of nᵣ evenly spaced nodes in a spherical body. \n\nPhysical and environmental parameters are described in p. Alternatively, these parameters may be individually listed in lieu of p. These parameters are outlined in the table below. \n\nNote: several of these parameters need to be entered as the natural logarithm of the value for easy compatibility with the inversion function.\n\nΔt gives the timestep (in My), tmax describes the duration of the model (My after CAIs = Myₛₛ), and Tmax and Tmin define the maximum and minimum temperatures (K) allowed for chondritic material in the body. Default values are only given for tmax (2000 Myₛₛ), Tmax (1500 K), and Tmin (0 K).\n\n| Parameter                 | log?  | `NmTpl`| `func`  |\n| :------------------------ | :--:  | :----: | :-----: |\n| solar system age (Ma)     | no    | `tss`  | `tₛₛ`    |\n| initial ²⁶Al/²⁷Al         | no    | `rAlo` | `rAlo`   |\n| closure temperature (K)   | yes   | `Tc`   | `Tc`     |\n| body radius (m)           | yes   | `R`    | `R`      |\n| accretion date (Myₛₛ)     | yes   | `ta`   | `tₐ`     |\n| disk temperature (K)      | yes   | `Tm`   | `To`     |\n| [Al] (g/g)                | yes   | `cAl`  | `Al_conc`|\n| density (kg/m³)           | yes   | `ρ`    | `ρ`      |\n| thermal diffusivity       | yes   | `k`    | `K`      |\n| specific heat capacity    | yes   | `Cp`   | `Cₚ`     |\n| ------------------------- | ----  | ------ | -------- |\n\nsee also: planetesimal_cooling_dates!\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.planetesimal_cooling_timestep!-Tuple{AbstractRange, AbstractVector, AbstractVector, AbstractVector, NamedTuple}","page":"Home","title":"ImpactChron.planetesimal_cooling_timestep!","text":"ImpactChron.planetesimal_cooling_timestep!(solartime::AbstractRange, time_i::Vector, Vfrxn::Vector, peakT::Vector, p::NamedTuple; nᵣ, Tmax, Tmin)\n\nReturns (overwrites) thermochronologic cooling dates in time_i as indices of solartime, along with corresponding volumetric fractions (Vfrxn) and peak temperatures in K (peakT) for nᵣ nodes in a body with model parameters given in p.  Tmax and Tmin respectively describe the maximum and minimum peak temperatures allowed.  Failing to exceed Tmin returns the date of accretion, and exceeding Tmax sets the volumetric fraction to zero (achondritic).\n\nsee also: planetesimal_cooling_dates, planetesimal_cooling_dates!\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.planetesimal_temperature-Tuple{AbstractArray, AbstractArray}","page":"Home","title":"ImpactChron.planetesimal_temperature","text":"ImpactChron.planetesimal_temperature(time::AbstractArray, radii::AbstractArray; To, Ao, λ, K, κ)\n\nCalculates the evolution of temperature over time steps at a range of radii defined for a conductively cooling sphere with thermal conductivity K and thermal diffusivity κ, given ambient temperature To, initial heat production Ao, and heat-production decay constant λ.\n\nlast(radii) defines the radius of the sphere.\n\nAdapted from: Carlslaw & Jäger (1959, ISBN-13: 978-0198533689) and Hevey & Sanders (2006)\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.prior_bounds-Tuple{Number, Unf}","page":"Home","title":"ImpactChron.prior_bounds","text":"ImpactChron.prior_bounds(x, p<:PriorDistribution)\n\nEvaluates whether a proposal x falls within the permissible bounds of its prior p <: PriorDistribution.  Always returns true if p is of type Nrm or lNrm, tests if x ∈ (p.a,p.b) for p::Unf.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.radius_at_depth-Tuple{Number, Number, Cone}","page":"Home","title":"ImpactChron.radius_at_depth","text":"ImpactChron.radius_at_depth(rᵢ, R, x<:ImpactSiteShape)\n\nCalculates the radius of the circle traced by a x-shaped region at a distance of rᵢ from the center of a body of radius R. Note that for  x::Hemisphere, only its x.r is used.\n\nsee also: ImpactSiteShape\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.rangemidbounds-Tuple{AbstractRange}","page":"Home","title":"ImpactChron.rangemidbounds","text":"rangebinbounds(x)\n\nCalculate a LinRange of the linear bounds for each \"midpoint\" step in x (<:AbstractRange).\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.rangemidpoints-Tuple{AbstractRange}","page":"Home","title":"ImpactChron.rangemidpoints","text":"rangemidpoints(x)\n\nCalculate a LinRange of the midpoints of each step in x(<:AbstractRange).\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.serial2dict-Tuple{String, Tuple}","page":"Home","title":"ImpactChron.serial2dict","text":"serial2dict(file::String, vars::Tuple; n, ll=true, accept=true, perturbation=false)\n\nLoad a serialized archive file from thermochron_metropolis into a Dict for post-run analysis, only incorporating the variables in vars and covering n steps (all steps by default).  Provide a Bool to incorporate log-likelihoods ll, acceptances accept, or the perturbed variables perturbation at each step.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.strict_priors-Tuple{NamedTuple, Symbol, PriorDistribution}","page":"Home","title":"ImpactChron.strict_priors","text":"ImpactChron.strict_priors(p, k, p_prior<:PriorDistribution)\n\nEvaluates strict priors related to Uniform distributions and other rules for paramter proposal p (::NamedTuple) and perturbed variable k (::Symbol), where p_prior is a PriorDistribution of p[k].\n\nReturns true if all priors are satisfied. Returns false if any priors fail.\n\nCurrently includes:\n\nEnsure bounds of uniform priors are not exceeded. See ImpactChron.prior_bounds.\nEnsure bombardment events α, β, γ begin in sequential order.\nThe ℯ-folding time of bombardment α must be longer than those of β and γ.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.thermochron_metropolis-Tuple{NamedTuple, NamedTuple, Tuple, AbstractArray, AbstractArray, ImpactSite}","page":"Home","title":"ImpactChron.thermochron_metropolis","text":"function thermochron_metropolis(p, pσ, pvars, mu, sigma, impactsite; nsteps, plims, downscale, petrotypes, kwargs...)\n\nRuns a Markov chain Monte Carlo (MCMC) routine that explores the parameter space of the variables in pvars (as type Symbol, see PARAMETERS table below), constrained by observed thermochronologic ages given in mu with corresponding 1σ uncertainties in sigma. Requires an initial proposal p (::NamedTuple) for parameter values and a Gaussian jump size pσ (::NamedTuple), each containing all model parameters listed in the table below. Note that many parameters are log-normally distributed and require a natural-log-space initial guess (see table). impactsite (::ImpactSite) describes the shape of asteroidal volume reheated per impact. See ImpactSite for details.\n\nFour kwargs are particularly important:\n\nnsteps ::Int is the number of post-burn-in Markov chain steps.\nplims ::NamedTuple – The model relies on several priors –- all non-bombardment variables (χ ∉ parameter name) are constrained by prior distributions. \n\nField names are as in p and pσ and values are subtypes of PriorDistribution. \n\ndownscale ::Integer bins the modeled age distribution to smooth it. The distribution is \"downscaled\" by the factor downcale. It is set to 1 by default (off). I recommend a value of 10. See ImpactChron.downscale! for details. \npetrotypes ::PetroTypes contains the weights and upperbound temperatures of different petrologic types. This weighting is turned off by default. See PetroTypes for details.\n\n\n\nPARAMETERS:\n\nDescription log? field\nsolar system age (Ma) no tss\ninitial ²⁶Al/²⁷Al no rAlo\nclosure temperature (K) yes Tc\nbody radius (m) yes R\naccretion date (Myₛₛ) yes ta\ndisk temperature (K) yes Tm\nAl abundance (g/g) yes cAl\ndensity (kg/m³) yes ρ\nthermal diffusivity yes k\nspecific heat capacity yes Cp\nα bombardment onset (Myₛₛ) no tχα\nα initial flux (My⁻¹) no Fχα\nα ℯ-folding time (My) no τχα\nβ bombardment onset (Myₛₛ) no tχβ\nβ initial flux (My⁻¹) no Fχβ\nβ ℯ-folding time (My) no τχβ\nγ bombardment onset (Myₛₛ) no tχγ\nγ initial flux (My⁻¹) no Fχγ\nγ ℯ-folding time (My) no τχγ\n\n\n\nAll the other kwargs...\n\nkwarg Default Description\nburnin 0 MCMC burn-in iterations\nΔt 1 model timestep (My)\nTmax 1500 maximum temperature (K)\nTmin 0 minimum temperature (K)\nnᵣ 100 number of radial nodes in simulated asteroid\nstepfactor 2.9 scales each accepted jump (pσ *= stepfactor, tuned to ~50% acceptance rate)\nupdateN 1000 print a status update of Markov chain every ...N steps\narchiveN 0 save an archive of Markov chain every ...N steps (0-> off, see also serial2dict)\narchiveages false true -> archives the downscaled age distribution for each step\nrng Random.Xoshiro() pseudorandom number generator seed\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.timemanagement-Tuple{Number, Number, Int64}","page":"Home","title":"ImpactChron.timemanagement","text":"ImpactChron.timemanagement(Δt, tmax, downscale_factor::Int)\n\nCalculate (and adjust if necessary) the model timescales for a given tmax (My after CAIs), Δt timestep (in My), and a downscale_factor.  May overwrite tmax to ensure downscaling works properly.\n\nReturns a Tuple containing the timescale and the downscaled timescale.\n\n\n\n\n\n","category":"method"},{"location":"#ImpactChron.weight_petro_types!-Tuple{AbstractArray, AbstractArray, PetroTypes}","page":"Home","title":"ImpactChron.weight_petro_types!","text":"ImpactChron.weight_petro_types!(v, T, petrotypes::PetroTypes)\n\nReweight volumetric fractions relative to the abundance of each petrologic type in the meteorite record. Takes Arrays of volumetric fraction (v) and peak temperature (T) as output by planetesimal_cooling_dates or contained within an AsteroidHistory.\n\nRequires all petrologic types to occupy at least one radial node, otherwise returns zero in all v.\n\nsee also: PetroTypes\n\n\n\n\n\n","category":"method"}]
}
